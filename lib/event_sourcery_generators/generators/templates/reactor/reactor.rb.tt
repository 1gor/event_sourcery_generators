module <%= project_name.underscore.camelize %>
  module Reactors
    module <%= reactor_name.underscore.camelize %>
      include EventSourcery::Postgres::Reactor

      processor_name :<%= reactor_name.underscore %>

      # emits_events StakeholderNotifiedOfTodoCompletion.type

      # table :reactor_<%= reactor_name.underscore %> do
      #   column :todo_id, :uuid, primary_key: true
      #   column :title,   :text
      # end

    <%- if event_names.empty? -%>
      # process TodoAdded do |event|
      #   table.insert(
      #     todo_id: event.aggregate_id,
      #     title:   event.body['title'],
      #   )
      # end

      # process TodoCompleted do |event|
      #   todo = table.where(todo_id: event.aggregate_id).first
      #
      #   emit_event(
      #     StakeholderNotifiedOfTodoCompletion.new(
      #       aggregate_id: event.aggregate_id,
      #       body:         { title: todo[:title] },
      #     )
      #   )
      # end
    <%- else -%>
      <% event_names.each do |event_name| %>
      process <%= event_name.underscore.camelize %> do |event|
        # Update scratch tables, emit events, ...
      end
      <%- end -%>
    <%- end -%>
    end
  end
end
